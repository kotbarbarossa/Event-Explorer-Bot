import asyncio
import os
from datetime import datetime, timedelta
import random
import logging
import re

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import (Message,
                           KeyboardButton,
                           ReplyKeyboardMarkup,
                           InlineKeyboardButton,
                           CallbackQuery)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from get_backend_response import (get_command_response,
                                  get_message_response,
                                  get_location_response,
                                  get_user,
                                  post_user,
                                  get_place_subscription,
                                  get_search_by_name_response,
                                  get_user_subscription)

from get_backend_response import (post_event,
                                  post_event_subscription,
                                  get_place_detail_response,
                                  post_place_subscription,
                                  delete_place_subscription,
                                  post_user_subscription,
                                  delete_user_subscription)

from parsers import parse_element, parse_event

load_dotenv()

EVENTS_NAMES = [
    "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –¥–æ–∂–¥—å",
    "–ü—ã–ª–µ—Å–æ—Å –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö",
    "–¢–∞–Ω—Ü—É—é—â–∏–π –±—Ä–æ–∫–∫–æ–ª–∏",
    "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ —Å –∂–µ–Ω—ã–º",
    "–ö–æ—Ç –≤ —à–ª—è–ø–µ",
    "–°–ø—è—â–∏–π –±—É–ª—å–¥–æ–≥",
    "–†–∞–∫–µ—Ç–∞-—Ç–æ—Å—Ç–µ—Ä",
    "–°–ª–æ–Ω –≤ –ø–∏–∂–∞–º–µ",
    "–ó–º–µ—è-–∞–∫—Ä–æ–±–∞—Ç",
    "–ì—Ä–æ–∑–Ω—ã–π –ø—É—à–∏—Å—Ç–∏–∫",
    "–ü–∏–Ω–≥–≤–∏–Ω-–≥–∏—Ç–∞—Ä–∏—Å—Ç",
    "–ë–ª—É–¥–∏–≤—à–∏–π—Å—è –∞–Ω–∞–Ω–∞—Å",
    "–í–µ—Å–µ–ª—ã–π –æ–≥—É—Ä—á–∏–∫",
    "–õ–µ—Ç–∞—é—â–∞—è –∫–∞–ø—É—Å—Ç–∞",
    "–•–æ—Ä–æ–≤–æ–π –µ–¥–∏–Ω–æ—Ä–æ–≥",
    "–ö–æ–ª–¥—É—é—â–∏–π –∫—Ä–æ–∫–æ–¥–∏–ª",
    "–ú–æ—Ä—Å–∫–æ–π –µ–¥–∏–Ω–æ—Ä–æ–≥",
    "–®–∞—Ä–∏–∫-–≤–æ–∑–¥—É—à–Ω—ã–π —à–∞—Ä",
    "–°–º–µ—à–∞–Ω–Ω—ã–π –æ–º–ª–µ—Ç",
    "–†–æ–±–æ—Ç-–ø–æ–¥—Å–æ–ª–Ω—É—Ö"
]

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

bot = Bot(TELEGRAM_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

BUTTONS = [
    [
        KeyboardButton(text='–ú–µ—Å—Ç–∞ —Ä—è–¥–æ–º', request_location=True),
        KeyboardButton(text='–ü–æ–∏—Å–∫ –Ω–æ –Ω–∞–∑–≤–∞–Ω–∏—é')
        ],
    [
        KeyboardButton(text='üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üåü'),
        KeyboardButton(text='üï∫ –ü–æ–¥–ø–∏—Å–∫–∏ üï∫')
        ],
    [KeyboardButton(text='–¢—ã–∫–Ω—É—Ç—å –±–æ—Ç–∞')]
]
reply_markup = ReplyKeyboardMarkup(keyboard=BUTTONS, resize_keyboard=True)


@dp.message(CommandStart())
async def start(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞."""
    user_id = message.from_user.id
    text = await get_user(user_id)

    if 'error' in text:
        user = message.from_user
        user_id = str(user.id)
        username = user.username if user.username else ''
        first_name = user.first_name if user.first_name else ''
        last_name = user.last_name if user.last_name else ''
        language_code = user.language_code if user.language_code else ''
        is_bot = user.is_bot
        await post_user(
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            language_code=language_code,
            is_bot=is_bot)
        text = (
            '–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ç—É—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!\n'
            '–¢—ã —Ç–∞–∫ —Ä–∞–Ω–æ, —á—Ç–æ —É –Ω–∞—Å –µ—â—ë –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è!\n'
            '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –ª–æ–∫–∞—Ü–∏—é!'
        )

        await message.answer(
            text,
            reply_markup=reply_markup
            )

    else:
        text = '–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!'
        await message.answer(
            text,
            reply_markup=reply_markup
            )


@dp.message(lambda message: message.location)
async def handle_location(
        message: types.Message,
        **kwargs):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ '–ª–æ–∫–∞—Ü–∏—è'."""
    user_id = message.from_user.id
    favorite = kwargs.get('favorite')
    search_data = kwargs.get('search_data')

    if favorite:
        response = await get_place_subscription(user_id)
    elif search_data:
        response = await get_search_by_name_response(*search_data.values())
    else:
        latitude = message.location.latitude
        longitude = message.location.longitude
        response = await get_location_response(user_id, latitude, longitude)
    if not response:
        return await message.answer(
            text='–ù–∏ —á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è',
            reply_markup=reply_markup)
    ELEMENT_LIMIT = 20
    for element in response[:ELEMENT_LIMIT]:
        if element['tags'].get('name'):
            element_id = element['id']
            events = element.get('events')

            text = await parse_element(element)

            button = [
                    [InlineKeyboardButton(
                        text='–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ',
                        callback_data=(f'details_button|{element_id}|'
                                       f'{favorite}')
                        )],
                ]

            if events:
                text += f'\n\n<b>–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:</b>'
                for event in events:
                    text += await parse_event(event=event)

            inline_keyboard = InlineKeyboardBuilder(markup=button)

            await message.answer(
                text=text,
                reply_markup=(inline_keyboard.as_markup())
                )


async def user_favotite_places(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await handle_location(message=message, favorite='yes')


async def user_subscriptions(message: types.Message,):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    user_id = message.from_user.id

    users = await get_user_subscription(telegram_id=user_id)

    if not users:
        text = '–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
        return await message.answer(
                text=text,)
    for user in users:
        user_telegram_id = user['telegram_id']
        telegram_username = (
            user['telegram_username']
            if user['telegram_username']
            else '-—Å–∫—Ä—ã—Ç–æ-@')
        button = [
            [InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                callback_data=('delete_subscribe_button|'
                               f'{user_telegram_id}|'
                               f'{telegram_username}'
                               )
                )]
        ]

        inline_keyboard = InlineKeyboardBuilder(markup=button)
        text = f'@{telegram_username}'
        await message.answer(
                text=text,
                reply_markup=inline_keyboard.as_markup(),
                )


@dp.callback_query(lambda query: query.data.startswith('details_button'))
async def details_button(query: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ "–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ" –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ª–æ–∫–∞—Ü–∏–µ–π.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç id –ª–æ–∫–∞—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä favorite.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞ –∏ —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
    """
    chat_id = query.from_user.id
    callback_data = query.data.split('|')
    element_id = callback_data[1]
    favorite = callback_data[2]
    emoji = "‚¨á"

    place_detail = await get_place_detail_response(
        telegram_id=chat_id, place_id=element_id)
    latitude = place_detail['lat']
    longitude = place_detail['lon']
    name = place_detail['tags']['name']
    events = place_detail.get('events')

    text_location = ('–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç'
                     f'\n–¥–æ <b>{name}</b>'
                     f'\n–Ω–∞–∂–º–∏ –Ω–∞ –∫–∞—Ä—Ç—É {emoji}.')

    if favorite == 'yes':
        button = [InlineKeyboardButton(
            text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            callback_data=f'delete_favorite_button|{element_id}|{name}'
            )]
    else:
        button = [InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            callback_data=f'add_favorite_button|{element_id}|{name}'
            )]

    await bot.send_message(
        chat_id=chat_id,
        text=text_location,
        )
    buttons = []
    buttons.append(button)

    button = [InlineKeyboardButton(
            text="–ü–æ–π–¥—É —Å–µ—á–∞—Å (—Å–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ)",
            callback_data=f'create_fast_event_button|{element_id}'
            )]

    buttons.append(button)

    inline_keyboard = InlineKeyboardBuilder(markup=buttons)

    await bot.send_location(
        chat_id=chat_id,
        latitude=latitude,
        longitude=longitude,
        reply_markup=inline_keyboard.as_markup(),
        )

    if events:
        for event in events:
            text = ''
            subscription_id = event.get('user_id')
            subscription_username = event.get('telegram_username')
            event_id = event.get('id')
            event_name = event.get('name')
            if event.get('telegram_username'):
                event_tg_username = (
                    f'@{event.get("telegram_username")}')
            else:
                event_tg_username = '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –î–∂–æ'

            text += await parse_event(event=event)

            buttons = []
            event_button = [InlineKeyboardButton(
                        text=f'–ø–æ–π–¥—É –∫ {event_tg_username} –Ω–∞ {event_name}',
                        callback_data=(
                            f'confirm_parti_button|'
                            f'{event_id}|'
                            f'{event_name}'
                            )
                        )
                        ]
            buttons.append(event_button)
            if subscription_username:
                subscribe_button = [InlineKeyboardButton(
                            text=f'–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {event_tg_username}',
                            callback_data=(
                                f'add_subscribe_button|'
                                f'{subscription_id}|'
                                f'{event_tg_username}'
                                )
                            )
                            ]
                buttons.append(subscribe_button)
            inline_keyboard = InlineKeyboardBuilder(markup=buttons)

            await bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=inline_keyboard.as_markup(),
                    )

    await bot.send_message(
        chat_id,
        f'–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∂–º–∏ —Å—é–¥–∞ {emoji} '
        f'\n/create_event_{element_id}',
        )


@dp.callback_query(
        lambda query: query.data.startswith('create_fast_event_button'))
async def create_fast_event_button(query: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ª–æ–∫–∞—Ü–∏–µ–π.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç id –ª–æ–∫–∞—Ü–∏–∏.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """
    chat_id = query.from_user.id

    callback_data_parts = query.data.split("|")

    element_id = callback_data_parts[1]

    start_datetime = datetime.now()
    end_datetime = start_datetime + timedelta(hours=3)

    random_name = random.choice(EVENTS_NAMES)

    await post_event(
        name=random_name,
        description='',
        telegram_id=str(chat_id),
        place_id=element_id,
        start_datetime=start_datetime.isoformat(),
        end_datetime=end_datetime.isoformat())

    await bot.send_message(
        chat_id,
        '–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!')


@dp.callback_query(lambda query: query.data.startswith('add_favorite_button'))
async def add_favorite_button(query: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ª–æ–∫–∞—Ü–∏–µ–π.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç id –ª–æ–∫–∞—Ü–∏–∏ –∏ –∏–º—è –ª–æ–∫–∞—Ü–∏–∏.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
    """
    chat_id = query.from_user.id

    callback_data_parts = query.data.split("|")

    element_id = callback_data_parts[1]
    element_name = callback_data_parts[2]

    await post_place_subscription(
        telegram_id=str(chat_id), place_id=str(element_id))
    await bot.send_message(
        chat_id, f'{element_name} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!')


@dp.callback_query(
        lambda query: query.data.startswith('delete_favorite_button'))
async def delete_favorite_button(query: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ª–æ–∫–∞—Ü–∏–µ–π.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç id –ª–æ–∫–∞—Ü–∏–∏ –∏ –∏–º—è –ª–æ–∫–∞—Ü–∏–∏.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —É–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.
    """
    chat_id = query.from_user.id

    callback_data_parts = query.data.split("|")

    element_id = callback_data_parts[1]
    element_name = callback_data_parts[2]

    await delete_place_subscription(
        telegram_id=str(chat_id), place_id=str(element_id))
    await bot.send_message(
        chat_id, f'{element_name} –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!')


@dp.callback_query(lambda query: query.data.startswith('confirm_parti_button'))
async def confirm_parti_button(query: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Å–æ–±—ã—Ç–∏–µ–º.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç id –∏ name —Å–æ–±—ã—Ç–∏—è.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤ —Å–æ–±—ã—Ç–∏–∏.
    """
    chat_id = str(query.from_user.id)

    callback_data_parts = query.data.split("|")

    event_id = int(callback_data_parts[1])
    event_name = callback_data_parts[2]
    await post_event_subscription(telegram_id=chat_id, event_id=event_id)
    await bot.send_message(
        chat_id,
        f'–£—á–∞—Å—Ç–∏–µ –≤ {event_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ')


@dp.callback_query(
        lambda query: query.data.startswith('delete_subscribe_button'))
async def delete_subscribe_button(query: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∏–º–µ–Ω–µ–º '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω'.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç id –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª–µ–π.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ —É–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    telegram_id = query.from_user.id
    chat_id = query.message.chat.id

    callback_data_parts = query.data.split("|")

    subscription_id = callback_data_parts[1]
    telegram_username = callback_data_parts[2]

    await delete_user_subscription(
        telegram_id=str(telegram_id), subscription_id=str(subscription_id))
    await bot.send_message(
        chat_id=chat_id,
        text=f'–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {telegram_username} —É–¥–∞–ª–µ–Ω–∞!')


@dp.callback_query(lambda query: query.data.startswith('add_subscribe_button'))
async def add_subscribe_button(query: CallbackQuery):
    """
    –ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Å–æ–±—ã—Ç–∏–µ–º.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç id –∏ name —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è.
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è.
    """
    telegram_id = query.from_user.id

    callback_data_parts = query.data.split("|")

    subscription_id = callback_data_parts[1]
    subscription_username = callback_data_parts[2]
    await post_user_subscription(
        telegram_id=str(telegram_id), subscription_id=str(subscription_id))
    await bot.send_message(
        telegram_id, f'–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ {subscription_username}!')


class SearchPlaceForm(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
    place_name = State()
    region_name = State()


@dp.message(lambda message: message.text.startswith('–ü–æ–∏—Å–∫'))
async def command_start(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç –∏–º—è –º–µ—Å—Ç–∞ –∏ —Ä–µ–≥–∏–æ–Ω.
    –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ü–µ–ø–æ—á–∫–µ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
    """

    button = [
        [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard=button, resize_keyboard=True)

    await state.set_state(SearchPlaceForm.place_name)
    await message.answer(
        (
            '–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –≤—ã–¥–∞—á–µ.'
            '\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:'
            ),
        reply_markup=reply_markup,
    )


@dp.message(lambda message: message.text.startswith("–û—Ç–º–µ–Ω–∞"))
async def cancel_handler(message: Message, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ —Å –±–æ—Ç–æ–º.
    """
    reply_markup = ReplyKeyboardMarkup(keyboard=BUTTONS, resize_keyboard=True)
    logging.info("Cancelling %r")
    await state.clear()
    await message.answer(
        "–û–∫.",
        reply_markup=reply_markup,
    )


@dp.message(SearchPlaceForm.place_name)
async def process_name(message: Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º—è –º–µ—Å—Ç–∞."""
    text = message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', text)
    if not match:
        await state.set_state(SearchPlaceForm.place_name)
        return await message.answer(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –∏–º—è –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')

    await state.update_data(name=message.text)
    await state.set_state(SearchPlaceForm.region_name)
    await message.answer(
        '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–∞–π–æ–Ω–∞:',
    )


@dp.message(SearchPlaceForm.region_name)
async def process_region_name(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞.
    –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    """
    text = message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', text)
    if not match:
        await state.set_state(SearchPlaceForm.region_name)
        return await message.answer(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –∏–º—è –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')

    data = await state.update_data(region_name=message.text)
    await state.clear()

    search_data = {
        'chat_id': message.from_user.id,
        'region_name': data["region_name"],
        'place_name': data["name"]
    }
    await message.answer(
                text='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ–∏—Å–∫. –ù–µ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–π—Ç–µ –¥–∏—Å–∫–µ—Ç—É —Å –¥–∞–Ω–Ω—ã–º–∏.',
                reply_markup=reply_markup)
    return await handle_location(message, search_data=search_data)


class EventCreationForm(StatesGroup):
    """–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."""
    event_name = State()
    event_description = State()
    event_date = State()
    event_time = State()
    event_duration = State()


async def is_valid_date(date_str):
    """–§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è."""
    try:
        datetime.strptime(date_str, '%d-%m-%Y')
        return True
    except ValueError:
        return False


async def is_valid_time(time_str):
    """–§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è."""
    try:
        datetime.strptime(time_str, '%H:%M')
        return True
    except ValueError:
        return False


@dp.message(lambda message: message.text.startswith('/create_event_'))
async def create_event_start(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—ã—Ç–∏—è.
    –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ü–µ–ø–æ—á–∫–µ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ.
    """
    message_text = message.text
    match = re.match(r'^/create_event_(\d+)', message_text)
    if match:

        place_id = match.group(1)
        await state.update_data(place_id=place_id)
        await state.update_data(chat_id=str(message.from_user.id))

        button = [
            [KeyboardButton(text='–û—Ç–º–µ–Ω–∞')]
        ]
        reply_markup = ReplyKeyboardMarkup(
            keyboard=button, resize_keyboard=True)

        await state.set_state(EventCreationForm.event_name)
        await message.answer(
            (
                '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:'),
            reply_markup=reply_markup,
        )
    else:
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. '
            '–ò—Å–ø–æ–ª—å–∑—É–π /create_event_<place_id>')


@dp.message(EventCreationForm.event_name)
async def create_event_name(message: Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º—è —Å–æ–±—ã—Ç–∏—è."""
    event_name = message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', event_name)
    if not match:
        await state.set_state(EventCreationForm.event_name)
        return await message.answer(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –∏–º—è –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')

    await state.update_data(event_name=event_name)
    await state.set_state(EventCreationForm.event_description)
    await message.answer(
        '–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:',
    )


@dp.message(EventCreationForm.event_description)
async def create_event_description(
        message: Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."""
    event_description = message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', event_description)
    if not match:
        await state.set_state(EventCreationForm.event_description)
        return await message.answer(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –∏–º—è –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')

    await state.update_data(event_description=event_description)
    await state.set_state(EventCreationForm.event_date)
    await message.answer(
        '–í–≤–µ–¥–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–¥–¥-–º–º-–≥–≥–≥–≥):',
    )


@dp.message(EventCreationForm.event_date)
async def create_event_date(message: Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è."""
    event_date = message.text
    if not await is_valid_date(event_date):
        return await message.answer(
            '–ù–µ—Ç —Ç–∞–∫–∞—è –¥–∞—Ç–∞ –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç -> –¥–¥-–º–º-–≥–≥–≥–≥!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')

    await state.update_data(event_date=event_date)
    await state.set_state(EventCreationForm.event_time)
    await message.answer(
        '–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—á—á:–º–º):',
        )


@dp.message(EventCreationForm.event_time)
async def create_event_time(message: Message, state: FSMContext) -> None:
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è."""
    event_time = message.text
    if not await is_valid_time(event_time):
        return await message.answer(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç -> —á—á:–º–º!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')

    await state.update_data(event_time=event_time)
    await state.set_state(EventCreationForm.event_duration)
    await message.answer(
        '–í–≤–µ–¥–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö:',
        )


@dp.message(EventCreationForm.event_duration)
async def create_event_duration(message: Message, state: FSMContext) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è.
    –í —Å–ª—É—á–µ —É—Å–ø–µ—Ö–∞ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
    """
    event_duration = message.text
    try:
        event_duration = int(event_duration)
        if 0 < event_duration <= 12:
            pass
        else:
            return await message.answer(
                '–¢–∞–∫ –Ω–µ –ø–æ–π–¥–µ—Ç!'
                '\n–û—Ç 1 –¥–æ 12 —á–∞—Å–æ–≤!'
                '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
    except ValueError:
        return await message.answer(
            '–ù–∏–∫—É–¥–∞ –Ω–µ –≥–æ–¥–∏—Ç—Å—è!'
            '\n–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')

    event = await state.update_data(event_duration=event_duration)
    await state.clear()

    date_str = f'{event["event_date"]} {event["event_time"]}:00.123000'
    start_datetime = datetime.strptime(date_str, '%d-%m-%Y %H:%M:%S.%f')

    end_datetime = start_datetime + timedelta(hours=event_duration)
    event['start_datetime'] = start_datetime.isoformat()
    event['end_datetime'] = end_datetime.isoformat()

    await post_event(
        name=event['event_name'],
        description=event['event_description'],
        telegram_id=event['chat_id'],
        place_id=event['place_id'],
        start_datetime=event['start_datetime'],
        end_datetime=event['end_datetime']
        )

    await message.answer(
                text='–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!',
                reply_markup=reply_markup)


@dp.message()
async def handle_message(message: types.Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    user_message = message.text

    button_messages = {
        'üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üåü': user_favotite_places,
        '–¢—ã–∫–Ω—É—Ç—å –±–æ—Ç–∞': start,
        'üï∫ –ü–æ–¥–ø–∏—Å–∫–∏ üï∫': user_subscriptions,
    }
    if user_message not in button_messages:
        text = await get_message_response(user_message, user_id)
        await message.answer(
            text,
            reply_markup=reply_markup
            )
    else:
        await button_messages[user_message](message=message)


@dp.message(lambda message: message.text.startswith('/'))
async def handle_command(message: Message) -> None:
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç—É –∫–æ–º–∞–Ω–¥."""
    command = message.text.replace('/', '')
    chat_id = message.from_user.id
    text = await get_command_response(command, chat_id)
    await bot.send_message(chat_id=message.from_user.id, text=text)


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""

    await dp.start_polling(bot)


if __name__ == '__main__':

    logging.basicConfig(
        filename='Event_Explorer.log',
        format='%(asctime)s - %(name)s - %(levelname)s - LINE: %(lineno)d'
        ' - FUNCTION: %(funcName)s - MESSAGE: %(message)s',
        level=logging.INFO,
        filemode='w'
    )

    asyncio.run(main())
