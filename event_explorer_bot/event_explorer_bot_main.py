import os
from dotenv import load_dotenv
import logging

from telegram import (Update, InlineKeyboardMarkup, InlineKeyboardButton,
                      ReplyKeyboardMarkup)
from telegram.constants import ParseMode
from telegram.ext import (filters, MessageHandler, ApplicationBuilder,
                          CommandHandler, ContextTypes)

from get_backend_response import (get_command_response,
                                  get_message_response,
                                  get_location_response,
                                  get_user,
                                  post_user,
                                  get_place_subscription,
                                  get_search_by_name_response,
                                  get_user_subscription)

from buttons import buttons_handlers

from parsers import parse_element, parse_event

from conversations.create_event import create_event_conversation
from conversations.search_place import search_by_name_conversation

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

BUTTONS = [
    ['üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üåü', 'üï∫ –ü–æ–¥–ø–∏—Å–∫–∏ üï∫'],
    ['–ü–æ–∏—Å–∫'],
    ['–¢—ã–∫–Ω—É—Ç—å –±–æ—Ç–∞']
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞."""
    chat_id = update.message.chat_id
    text = await get_user(chat_id)
    reply_markup = ReplyKeyboardMarkup(BUTTONS, resize_keyboard=True)

    if 'error' in text:
        user = update.message.from_user
        user_id = str(user.id)
        username = user.username if hasattr(user, 'username') else ''
        first_name = user.first_name if hasattr(user, 'first_name') else ''
        last_name = user.last_name if hasattr(user, 'last_name') else ''
        language_code = user.language_code if hasattr(
            user, 'language_code') else ''
        is_bot = user.is_bot
        await post_user(
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            language_code=language_code,
            is_bot=is_bot)
        text = (
            '–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ç—É—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!\n'
            '–¢—ã —Ç–∞–∫ —Ä–∞–Ω–æ —á—Ç–æ —É –Ω–∞—Å –µ—â—ë –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è!\n'
            '–°–æ—Ä—è–Ω –ø—Ä–∏–¥–µ—Ç—Å—è —Ç—ã–∫–∞—Ç—å –ø–∞–ª—å—á–∏–∫–∞–º–∏ —Å–∞–º–æ–º—É!'
                )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup
            )
    else:
        text = '–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!'
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    chat_id = update.message.chat_id
    message = update.message.text

    messages = {
        'üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üåü': user_favotite_places,
        '–¢—ã–∫–Ω—É—Ç—å –±–æ—Ç–∞': start,
    }
    if message not in messages:
        text = await get_message_response(message, chat_id)
        await context.bot.send_message(chat_id=chat_id, text=text)
    else:
        await messages[message](update, context)


async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç—É –∫–æ–º–∞–Ω–¥."""
    command = update.message.text.replace('/', '')
    chat_id = update.effective_chat.id
    text = await get_command_response(command, chat_id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)


async def handle_location(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE, **kwargs):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ '–ª–æ–∫–∞—Ü–∏—è'."""
    chat_id = update.effective_chat.id
    favorite = kwargs.get('favorite')
    search_data = kwargs.get('search_data')

    if favorite:
        response = await get_place_subscription(chat_id)
    elif search_data:
        response = await get_search_by_name_response(*search_data.values())
    else:
        latitude = update.message.location.latitude
        longitude = update.message.location.longitude
        response = await get_location_response(chat_id, latitude, longitude)
    if not response:
        return await context.bot.send_message(
            chat_id,
            '–ù–∏ —á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è')
    ELEMENT_LIMIT = 20
    for element in response[:ELEMENT_LIMIT]:
        if element['tags'].get('name'):
            element_id = element['id']
            events = element.get('events')

            text = await parse_element(element)

            buttons = [
                    [InlineKeyboardButton(
                        '–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ',
                        callback_data=(f'details_button|{element_id}|'
                                       f'{favorite}')
                        )],
                ]

            if events:
                text += f'\n\n<b>–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:</b>'
                for event in events:
                    text += await parse_event(event=event)

            keyboard = InlineKeyboardMarkup(buttons)

            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
                )


async def user_favotite_places(
        update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await handle_location(update, context, favorite='yes')


async def user_subscriptions(
        update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    chat_id = update.message.chat_id

    users = await get_user_subscription(telegram_id=chat_id)

    if not users:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        return await context.bot.send_message(chat_id, text)
    for user in users:
        user_telegram_id = user['telegram_id']
        telegram_username = (
            user['telegram_username']
            if user['telegram_username']
            else '-—Å–∫—Ä—ã—Ç–æ-@')
        button = [InlineKeyboardButton(
            "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            callback_data=('delete_subscribe_button|'
                           f'{user_telegram_id}|'
                           f'{telegram_username}')
            )]
        keyboard = InlineKeyboardMarkup([button])
        text = f'@{telegram_username}'
        await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=keyboard,
                    )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler('start', start))

    location_handler = MessageHandler(filters.LOCATION, handle_location)
    application.add_handler(location_handler)

    user_subscription = MessageHandler(
            filters.TEXT & filters.Regex(
                r'üï∫ –ü–æ–¥–ø–∏—Å–∫–∏ üï∫'), user_subscriptions)
    application.add_handler(user_subscription)

    for handler in buttons_handlers:
        application.add_handler(handler)

    application.add_handler(create_event_conversation)

    application.add_handler(search_by_name_conversation)

    echo_handler = MessageHandler(
        filters.TEXT & (~filters.COMMAND), handle_message)
    application.add_handler(echo_handler)

    unknown_handler = MessageHandler(filters.COMMAND, handle_command)
    application.add_handler(unknown_handler)

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    logging.basicConfig(
        filename='Event_Explorer.log',
        format='%(asctime)s - %(name)s - %(levelname)s - LINE: %(lineno)d'
        ' - FUNCTION: %(funcName)s - MESSAGE: %(message)s',
        level=logging.INFO,
        filemode='w'
    )
    main()
