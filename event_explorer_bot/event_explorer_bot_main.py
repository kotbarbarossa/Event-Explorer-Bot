import os
from dotenv import load_dotenv
import logging
import re
from datetime import datetime, timedelta
import random

from telegram import (Update, InlineKeyboardMarkup, InlineKeyboardButton,
                      ReplyKeyboardMarkup)
from telegram.constants import ParseMode
from telegram.ext import (filters, MessageHandler, ApplicationBuilder,
                          CommandHandler, ContextTypes, CallbackContext,
                          CallbackQueryHandler, ConversationHandler,)

from get_backend_response import (get_command_response,
                                  get_message_response,
                                  get_location_response,
                                  get_user,
                                  post_user,
                                  post_event,
                                  get_place_subscription,
                                  get_search_by_name_response,
                                  get_user_subscription)

from buttons import (details_button,
                     create_fast_event_button,
                     add_favorite_button,
                     confirm_parti_button,
                     delete_favorite_button,
                     add_subscribe_button,
                     delete_subscribe_button)

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

EMOJI_LIST = ['üòÑ', 'üéâ', 'ü•≥', 'üéà', 'üåü', 'üéÅ', 'üéÇ', 'üçæ', 'üéä', 'ü•Ç',
              'ü§©', 'üç∞', 'üéÜ', 'üéá', 'üéóÔ∏è', 'üéÄ', 'üß®', 'ü™Ö', 'üéµ', 'üé∑',
              'üé∏', 'üé∂', 'üç∏', 'üçπ', 'üçª', 'üï∫', 'üíÉ', 'üï∂Ô∏è', 'üì∏', 'üåà']


EMOJI_PROFESSIONS_LIST = ['üëÆ', 'üïµÔ∏è', 'üë∑', 'üë©‚Äçüöí', 'üë®‚Äçüåæ', 'üë©‚Äçüç≥', 'üë®‚Äçüéì',
                          'üë©‚Äçüè´', 'üë®‚Äçüé§', 'üë©‚Äçüé®', 'üë®‚ÄçüöÄ', 'üë©‚Äç‚öñÔ∏è', 'üë®‚Äçü¶º', 'üë©‚Äçü¶Ø',
                          'üßï', 'üßô‚Äç‚ôÇÔ∏è', 'üßõ‚Äç‚ôÄÔ∏è', 'üßù‚Äç‚ôÇÔ∏è', 'üßû‚Äç‚ôÄÔ∏è', 'üßú‚Äç‚ôÇÔ∏è', 'ü¶∏‚Äç‚ôÄÔ∏è',
                          'ü¶π‚Äç‚ôÇÔ∏è', 'ü¶∫', 'ü§¥', 'üë∏', 'üéÖ', 'üßë‚Äçüéì', 'üßë‚Äçüè´',
                          'üßë‚Äçüé§', 'üßë‚Äçüé®', 'üßë‚ÄçüöÄ', 'üßë‚Äç‚öñÔ∏è', 'üßë‚Äçü¶º', 'üßë‚Äçü¶Ø', 'ü¶∞',
                          'ü¶±', 'ü¶≥', 'ü¶≤', 'üë©‚Äç‚öïÔ∏è', 'üë®‚Äç‚öïÔ∏è', 'üë©‚Äçüî¨', 'üë®‚Äçüî¨',
                          'üë©‚Äçüíº', 'üë®‚Äçüíº', 'üë©‚Äçüåæ', 'üë®‚Äçüåæ', 'üë©‚Äçüç≥', 'üë®‚Äçüç≥', 'üë©‚Äçüé§',
                          'üë®‚Äçüé§', 'üë©‚Äçüé®', 'üë®‚Äçüé®', 'üë©‚ÄçüöÄ', 'üë®‚ÄçüöÄ', 'üë©‚Äç‚öñÔ∏è', 'üë®‚Äç‚öñÔ∏è',
                          'üë©‚Äçü¶Ø', 'üë®‚Äçü¶Ø', 'ü¶´', 'ü¶≠', 'üêà‚Äç‚¨õ', 'ü¶Æ', 'ü¶ô',
                          'ü¶•', 'ü¶¶', 'ü¶®', 'ü¶©']

[
    EVENT_NAME,
    EVENT_DESCRIPTION,
    EVENT_DATE,
    EVENT_TIME,
    EVENT_DURATION
] = range(5)

SEARCH_NAME, SEARCH_REGION_NAME = range(2)

EVENTS_NAMES = [
    "–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –¥–æ–∂–¥—å",
    "–ü—ã–ª–µ—Å–æ—Å –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö",
    "–¢–∞–Ω—Ü—É—é—â–∏–π –±—Ä–æ–∫–∫–æ–ª–∏",
    "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ —Å –∂–µ–Ω—ã–º",
    "–ö–æ—Ç –≤ —à–ª—è–ø–µ",
    "–°–ø—è—â–∏–π –±—É–ª—å–¥–æ–≥",
    "–†–∞–∫–µ—Ç–∞-—Ç–æ—Å—Ç–µ—Ä",
    "–°–ª–æ–Ω –≤ –ø–∏–∂–∞–º–µ",
    "–ó–º–µ—è-–∞–∫—Ä–æ–±–∞—Ç",
    "–ì—Ä–æ–∑–Ω—ã–π –ø—É—à–∏—Å—Ç–∏–∫",
    "–ü–∏–Ω–≥–≤–∏–Ω-–≥–∏—Ç–∞—Ä–∏—Å—Ç",
    "–ë–ª—É–¥–∏–≤—à–∏–π—Å—è –∞–Ω–∞–Ω–∞—Å",
    "–í–µ—Å–µ–ª—ã–π –æ–≥—É—Ä—á–∏–∫",
    "–õ–µ—Ç–∞—é—â–∞—è –∫–∞–ø—É—Å—Ç–∞",
    "–•–æ—Ä–æ–≤–æ–π –µ–¥–∏–Ω–æ—Ä–æ–≥",
    "–ö–æ–ª–¥—É—é—â–∏–π –∫—Ä–æ–∫–æ–¥–∏–ª",
    "–ú–æ—Ä—Å–∫–æ–π –µ–¥–∏–Ω–æ—Ä–æ–≥",
    "–®–∞—Ä–∏–∫-–≤–æ–∑–¥—É—à–Ω—ã–π —à–∞—Ä",
    "–°–º–µ—à–∞–Ω–Ω—ã–π –æ–º–ª–µ—Ç",
    "–†–æ–±–æ—Ç-–ø–æ–¥—Å–æ–ª–Ω—É—Ö"
]

BUTTONS = [
    ['üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üåü', 'üï∫ –ü–æ–¥–ø–∏—Å–∫–∏ üï∫'],
    ['–ü–æ–∏—Å–∫'],
    ['–¢—ã–∫–Ω—É—Ç—å –±–æ—Ç–∞']
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞."""
    chat_id = update.message.chat_id
    text = await get_user(chat_id)
    reply_markup = ReplyKeyboardMarkup(BUTTONS, resize_keyboard=True)

    if 'error' in text:
        user = update.message.from_user
        user_id = str(user.id)
        username = user.username if hasattr(user, 'username') else ''
        first_name = user.first_name if hasattr(user, 'first_name') else ''
        last_name = user.last_name if hasattr(user, 'last_name') else ''
        language_code = user.language_code if hasattr(
            user, 'language_code') else ''
        is_bot = user.is_bot
        await post_user(
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            language_code=language_code,
            is_bot=is_bot)
        text = (
            '–ü—Ä–∏–≤–µ—Ç! –¢—ã —Ç—É—Ç –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑!\n'
            '–¢—ã —Ç–∞–∫ —Ä–∞–Ω–æ —á—Ç–æ —É –Ω–∞—Å –µ—â—ë –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ–±—è!\n'
            '–°–æ—Ä—è–Ω –ø—Ä–∏–¥–µ—Ç—Å—è —Ç—ã–∫–∞—Ç—å –ø–∞–ª—å—á–∏–∫–∞–º–∏ —Å–∞–º–æ–º—É!'
                )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup
            )
    else:
        text = '–†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!'
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    chat_id = update.message.chat_id
    message = update.message.text

    messages = {
        'üåü –ò–∑–±—Ä–∞–Ω–Ω–æ–µ üåü': user_favotite_places,
        '–¢—ã–∫–Ω—É—Ç—å –±–æ—Ç–∞': start,
    }
    if message not in messages:
        text = await get_message_response(message, chat_id)
        await context.bot.send_message(chat_id=chat_id, text=text)
    else:
        await messages[message](update, context)


async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç—É –∫–æ–º–∞–Ω–¥."""
    command = update.message.text.replace('/', '')
    chat_id = update.effective_chat.id
    text = await get_command_response(command, chat_id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)


async def parse_element(element) -> str:
    text = ''
    amenity = element['tags'].get('amenity')
    name = element['tags'].get(
        'name') or element['tags'].get('name:en')
    name_ru = element['tags'].get('name:ru')
    opening_hours = element['tags'].get('opening_hours')
    cuisine = element['tags'].get('cuisine')
    outdoor_seating = element['tags'].get('outdoor_seating')
    website = element['tags'].get('website')
    website_menu = element['tags'].get('website:menu')
    contact_vk = element['tags'].get('contact:vk')
    contact_website = element['tags'].get('contact:website')

    text = f'<b>{name}</b>'

    if amenity:
        text += f' <i>{amenity}</i>'
    if name_ru:
        text += f'\n{name_ru}'
    if opening_hours:
        text += f'\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {opening_hours}'
    if cuisine:
        text += f'\n–ö—É—Ö–Ω—è: {cuisine.replace(";", ", ")}'
    if outdoor_seating == 'yes':
        text += '\n–ï—Å—Ç—å —Ç–µ—Ä–∞—Å—Å–∞'
    if website:
        text += f'\n{website}'
    if website_menu:
        text += f'\n–ú–µ–Ω—é: {website_menu}'
    if contact_vk:
        text += f'\nVK: {contact_vk}'
    if contact_website:
        text += f'\n{contact_website}'
    return text


async def parse_event(event) -> str:
    text = ''

    time_obj_start = datetime.fromisoformat(
        event.get('start_datetime'))
    time_obj_end = datetime.fromisoformat(
        event.get('end_datetime'))
    event_wnen = time_obj_start.strftime('%d/%m/%Y')
    event_name = event.get('name')
    event_description = event.get('description')
    if event.get('telegram_username'):
        event_tg_username = (
            f'@{event.get("telegram_username")}')
    else:
        event_tg_username = '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –î–∂–æ'
    event_start = time_obj_start.strftime('%H:%M')
    event_end = time_obj_end.strftime('%H:%M')
    event_participants = event.get('event_participants')
    emoji_one = random.choice(EMOJI_LIST)
    emoji_two = random.choice(EMOJI_LIST)
    emoji_three = random.choice(EMOJI_LIST)
    text += f'\n{emoji_one}{emoji_two}{emoji_three}'
    text += f'\n–ö–æ–≥–¥–∞: {event_wnen}'
    text += f'\n–ù–∞–∑–≤–∞–Ω–∏–µ: {event_name}'
    if event_description:
        text += f'\n–û–ø–∏—Å–∞–Ω–∏–µ: {event_description}'
    text += f'\n–û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç: {event_tg_username}'
    text += f'\n–ù–∞—á–∞–ª–æ: {event_start}'
    text += f'\n–ö–æ–Ω–µ—Ü: {event_end}'
    if event_participants:
        text += '\n–£—á–∞—Å—Ç–Ω–∏–∫–∏: '
        for user in event_participants:
            if user.get('telegram_username'):
                tg_username = (
                    f'@{user.get("telegram_username")}')
            else:
                tg_username = '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –î–∂–æ'
            text += f'\n{random.choice(EMOJI_LIST)} '
            text += f'{tg_username}'
    text += '\n'
    return text


async def handle_location(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE, **kwargs):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ '–ª–æ–∫–∞—Ü–∏—è'."""
    chat_id = update.effective_chat.id
    favorite = kwargs.get('favorite')
    search_data = kwargs.get('search_data')

    if favorite:
        response = await get_place_subscription(chat_id)
    elif search_data:
        response = await get_search_by_name_response(*search_data.values())
    else:
        latitude = update.message.location.latitude
        longitude = update.message.location.longitude
        response = await get_location_response(chat_id, latitude, longitude)
    if not response:
        return await context.bot.send_message(
            chat_id,
            '–ù–∏ —á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è')
    ELEMENT_LIMIT = 20
    for element in response[:ELEMENT_LIMIT]:
        if element['tags'].get('name'):
            element_id = element['id']
            events = element.get('events')

            text = await parse_element(element)

            buttons = [
                    [InlineKeyboardButton(
                        '–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ',
                        callback_data=(f'details_button|{element_id}|'
                                       f'{favorite}')
                        )],
                ]

            if events:
                text += f'\n\n<b>–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:</b>'
                for event in events:
                    text += await parse_event(event=event)

            keyboard = InlineKeyboardMarkup(buttons)

            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
                )


async def user_favotite_places(
        update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await handle_location(update, context, favorite='yes')


async def user_subscriptions(
        update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    chat_id = update.message.chat_id

    users = await get_user_subscription(telegram_id=chat_id)

    if not users:
        text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        return await context.bot.send_message(chat_id, text)
    for user in users:
        user_telegram_id = user['telegram_id']
        telegram_username = user['telegram_username']
        button = [InlineKeyboardButton(
            "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            callback_data=('delete_subscribe_button|'
                           f'{user_telegram_id}|'
                           f'{telegram_username}')
            )]
        keyboard = InlineKeyboardMarkup([button])
        text = f'@{telegram_username}'
        return await context.bot.send_message(
                    chat_id=chat_id,
                    text=text,
                    reply_markup=keyboard,
                    )


async def create_event(update: Update, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–±—ã—Ç–∏—è.
    –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ü–µ–ø–æ—á–∫–µ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ.
    """
    message_text = update.message.text
    match = re.match(r'^/create_event_(\d+)', message_text)

    if match:
        place_id = match.group(1)
        context.user_data['event'] = {}
        context.user_data['event']['place_id'] = place_id
        context.user_data['event']['chat_id'] = str(
            update.message.from_user.id)

        await update.message.reply_text('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:')
        return EVENT_NAME
    else:
        await update.message.reply_text(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. '
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_event_<place_id>')
        return ConversationHandler.END


async def get_event_name(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º—è —Å–æ–±—ã—Ç–∏—è."""
    text = update.message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', text)
    if not match:
        await update.message.reply_text(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –∏–º—è –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
        return EVENT_NAME
    context.user_data['event']['name'] = text
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:')
    return EVENT_DESCRIPTION


async def get_event_description(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."""
    text = update.message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', text)
    if not match:
        await update.message.reply_text(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
        return EVENT_DESCRIPTION
    context.user_data['event']['description'] = text
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è (–¥–¥-–º–º-–≥–≥–≥–≥):')
    return EVENT_DATE


async def is_valid_date(date_str):
    """–§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è."""
    try:
        datetime.strptime(date_str, '%d-%m-%Y')
        return True
    except ValueError:
        return False


async def get_event_date(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è."""
    text = update.message.text
    if not await is_valid_date(text):
        await update.message.reply_text(
            '–ù–µ—Ç —Ç–∞–∫–∞—è –¥–∞—Ç–∞ –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç -> –¥–¥-–º–º-–≥–≥–≥–≥!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
        return EVENT_DATE
    context.user_data['event']['date'] = text
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—á—á:–º–º):')
    return EVENT_TIME


async def is_valid_time(time_str):
    """–§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è."""
    try:
        datetime.strptime(time_str, '%H:%M')
        return True
    except ValueError:
        return False


async def get_event_time(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è."""
    text = update.message.text
    if not await is_valid_time(text):
        await update.message.reply_text(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç -> —á—á:–º–º!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
        return EVENT_TIME
    context.user_data['event']['time'] = text
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id, '–í–≤–µ–¥–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö:')
    return EVENT_DURATION


async def get_event_duration(update: Update, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è.
    –í —Å–ª—É—á–µ —É—Å–ø–µ—Ö–∞ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
    """
    duration = update.message.text
    try:
        duration = int(duration)
        if 0 < duration <= 12:
            pass
        else:
            await update.message.reply_text(
                '–ù–∏ –∫—É–¥–∞ –Ω–µ –≥–æ–¥–∏—Ç—Å—è!'
                '\n–ù–µ –±–æ–ª—å—à–µ 12 —á–∞—Å–æ–≤!'
                '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
            return EVENT_DURATION
    except ValueError:
        await update.message.reply_text(
            '–ù–∏ –∫—É–¥–∞ –Ω–µ –≥–æ–¥–∏—Ç—Å—è!'
            '\n–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
        return EVENT_DURATION

    event = context.user_data["event"]
    date_str = f'{event["date"]} {event["time"]}:00.123000'
    start_datetime = datetime.strptime(date_str, '%d-%m-%Y %H:%M:%S.%f')

    end_datetime = start_datetime + timedelta(hours=duration)
    event['start_datetime'] = start_datetime.isoformat()
    event['end_datetime'] = end_datetime.isoformat()

    await post_event(
        name=event['name'],
        description=event['description'],
        telegram_id=event['chat_id'],
        place_id=event['place_id'],
        start_datetime=event['start_datetime'],
        end_datetime=event['end_datetime']
        )

    context.user_data.clear()
    await update.message.reply_text('–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!')

    return ConversationHandler.END


async def search_place(update: Update, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç –∏–º—è –º–µ—Å—Ç–∞ –∏ —Ä–µ–≥–∏–æ–Ω.
    –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ü–µ–ø–æ—á–∫–µ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
    """
    context.user_data['search'] = {}
    context.user_data['search']['chat_id'] = str(
        update.message.from_user.id)

    await update.message.reply_text(
        '–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –≤—ã–¥–∞—á–µ.'
        '\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:')
    return SEARCH_NAME


async def search_name(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º—è –º–µ—Å—Ç–∞."""
    text = update.message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', text)
    if not match:
        await update.message.reply_text(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –∏–º—è –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
        return SEARCH_NAME

    search = context.user_data["search"]

    search['place_name'] = text

    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–∞–π–æ–Ω–∞:')
    return SEARCH_REGION_NAME


async def search_region_name(update: Update, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞.
    –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    """
    text = update.message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', text)
    if not match:
        await update.message.reply_text(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
        return SEARCH_REGION_NAME

    search = context.user_data["search"]
    search['region_name'] = text
    search_data = {
        'chat_id': search['chat_id'],
        'region_name': search['region_name'],
        'place_name': search['place_name']
    }

    await handle_location(
        update,
        context,
        search_data=search_data,
        )

    context.user_data.clear()

    return ConversationHandler.END


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler('start', start))

    location_handler = MessageHandler(filters.LOCATION, handle_location)
    application.add_handler(location_handler)

    user_subscription = MessageHandler(
            filters.TEXT & filters.Regex(
                r'üï∫ –ü–æ–¥–ø–∏—Å–∫–∏ üï∫'), user_subscriptions)
    application.add_handler(user_subscription)

    application.add_handler(CallbackQueryHandler(
        details_button, pattern="details_button"))
    application.add_handler(CallbackQueryHandler(
        create_fast_event_button, pattern="create_fast_event_button"))
    application.add_handler(CallbackQueryHandler(
        add_favorite_button, pattern="add_favorite_button"))
    application.add_handler(CallbackQueryHandler(
        confirm_parti_button, pattern="confirm_parti_button"))
    application.add_handler(CallbackQueryHandler(
        delete_favorite_button, pattern="delete_favorite_button"))
    application.add_handler(CallbackQueryHandler(
        delete_subscribe_button, pattern="delete_subscribe_button"))
    application.add_handler(CallbackQueryHandler(
        add_subscribe_button, pattern="add_subscribe_button"))

    conversation_handler = ConversationHandler(
        entry_points=[MessageHandler(
            filters.TEXT & filters.Regex(
                r'^/create_event_\d+'), create_event)],
        states={
            EVENT_NAME: [MessageHandler(
                filters.TEXT & (~filters.COMMAND), get_event_name)],
            EVENT_DESCRIPTION: [MessageHandler(
                filters.TEXT & (~filters.COMMAND), get_event_description)],
            EVENT_DATE: [MessageHandler(
                filters.TEXT & (~filters.COMMAND), get_event_date)],
            EVENT_TIME: [MessageHandler(
                filters.TEXT & (~filters.COMMAND), get_event_time)],
            EVENT_DURATION: [MessageHandler(
                filters.TEXT & (~filters.COMMAND), get_event_duration)],
        },
        fallbacks=[]
    )
    application.add_handler(conversation_handler)

    search_by_handler = ConversationHandler(
        entry_points=[MessageHandler(
            filters.TEXT & filters.Regex(
                r'^–ü–æ–∏—Å–∫'), search_place)],
        states={
            SEARCH_NAME: [MessageHandler(
                filters.TEXT & (~filters.COMMAND), search_name)],
            SEARCH_REGION_NAME: [MessageHandler(
                filters.TEXT & (~filters.COMMAND), search_region_name)],
        },
        fallbacks=[]
    )
    application.add_handler(search_by_handler)

    echo_handler = MessageHandler(
        filters.TEXT & (~filters.COMMAND), handle_message)
    application.add_handler(echo_handler)

    unknown_handler = MessageHandler(filters.COMMAND, handle_command)
    application.add_handler(unknown_handler)

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    logging.basicConfig(
        filename='Event_Explorer.log',
        format='%(asctime)s - %(name)s - %(levelname)s - LINE: %(lineno)d'
        ' - FUNCTION: %(funcName)s - MESSAGE: %(message)s',
        level=logging.INFO,
        filemode='w'
    )
    main()
