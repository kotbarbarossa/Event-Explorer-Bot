import re

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import (filters, MessageHandler, CallbackContext,
                          ConversationHandler,)

from get_backend_response import get_search_by_name_response

from parsers import parse_element, parse_event

SEARCH_NAME, SEARCH_REGION_NAME = range(2)


async def search_place(update: Update, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç –∏–º—è –º–µ—Å—Ç–∞ –∏ —Ä–µ–≥–∏–æ–Ω.
    –ü–æ—Å–ª–µ–¥–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ü–µ–ø–æ—á–∫–µ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.
    """
    context.user_data['search'] = {}
    context.user_data['search']['chat_id'] = str(
        update.message.from_user.id)

    await update.message.reply_text(
        '–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –≤ –≤—ã–¥–∞—á–µ.'
        '\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è:')
    return SEARCH_NAME


async def search_name(update: Update, context: CallbackContext):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º—è –º–µ—Å—Ç–∞."""
    text = update.message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', text)
    if not match:
        await update.message.reply_text(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –∏–º—è –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
        return SEARCH_NAME

    search = context.user_data["search"]

    search['place_name'] = text

    chat_id = update.effective_chat.id
    await context.bot.send_message(
        chat_id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Ä–∞–π–æ–Ω–∞:')
    return SEARCH_REGION_NAME


async def search_region_name(update: Update, context: CallbackContext):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞.
    –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    """
    text = update.message.text
    match = re.match(r'^\s*[a-zA-Z–∞-—è–ê-–Ø\s]{1,25}\s*$', text)
    if not match:
        await update.message.reply_text(
            '–ù–µ—Ç —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –ø–æ–π–¥–µ—Ç!'
            '\n–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ù–µ –±–æ–ª—å—à–µ 25 —Å–∏–º–≤–æ–ª–æ–≤!'
            '\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫ –¥—Ä—É–∂–æ–∫ –ø–∏—Ä–æ–∂–æ–∫:')
        return SEARCH_REGION_NAME

    search = context.user_data["search"]
    search['region_name'] = text
    search_data = {
        'chat_id': search['chat_id'],
        'region_name': search['region_name'],
        'place_name': search['place_name']
    }

    chat_id = update.effective_chat.id
    response = await get_search_by_name_response(*search_data.values())

    if not response:
        return await context.bot.send_message(
            chat_id,
            '–ü–æ–∏—Å–∫ –Ω–µ –≤—ã–¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ü§∑‚Äç‚ôÇÔ∏è')
    ELEMENT_LIMIT = 20
    for element in response[:ELEMENT_LIMIT]:
        if element['tags'].get('name'):
            element_id = element['id']
            events = element.get('events')

            text = await parse_element(element)

            buttons = [
                    [InlineKeyboardButton(
                        '–°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ',
                        callback_data=(f'details_button|{element_id}|'
                                       )
                        )],
                ]

            if events:
                text += f'\n\n<b>–ù–∞–π–¥–µ–Ω–æ {len(events)} —Å–æ–±—ã—Ç–∏–π:</b>'
                for event in events:
                    text += await parse_event(event=event)

            keyboard = InlineKeyboardMarkup(buttons)

            await context.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML
                )

    context.user_data.clear()

    return ConversationHandler.END


search_by_name_conversation = ConversationHandler(
    entry_points=[MessageHandler(
        filters.TEXT & filters.Regex(
            r'^–ü–æ–∏—Å–∫'), search_place)],
    states={
        SEARCH_NAME: [MessageHandler(
            filters.TEXT & (~filters.COMMAND), search_name)],
        SEARCH_REGION_NAME: [MessageHandler(
            filters.TEXT & (~filters.COMMAND), search_region_name)],
    },
    fallbacks=[]
)
